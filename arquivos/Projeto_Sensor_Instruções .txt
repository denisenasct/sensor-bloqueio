# Resumo do Projeto: Sistema de Bloqueio por Sensor Ultrassônico

Este documento reúne todos os códigos, esquemas e instruções necessários para a implementação do projeto de um sistema de bloqueio utilizando um sensor ultrassônico e Arduino. O objetivo é fornecer um guia completo e consolidado para replicar o projeto.

---

# Descrição do Projeto
O sistema utiliza um sensor ultrassônico para detectar a distância do usuário. Quando um objeto é detectado a uma distância inferior ao limite configurado (80 cm), o sistema ativa um bloqueio de tela ou outro mecanismo, dependendo da aplicação.

# Componentes Necessários
- 1 Placa Arduino (UNO)
- 1 Sensor Ultrassônico HC-SR04
- 1 Protoboard
- Cabos Jumper (macho-macho)
- 1 Resistor de 330Ω
- Fonte de alimentação USB para o Arduino
- Computador com IDE Arduino instalada

---

# Esquema de Ligação

# Conexões do Sensor Ultrassônico (HC-SR04):
| Pino do Sensor | Conexão no Arduino |
|----------------|---------------------|
| VCC            | 5V                 |
| GND            | GND                |
| TRIG           | Pino Digital 5     |
| ECHO           | Pino Digital 4     |

# Conexões do LED (opcional):
| Pino do LED | Conexão no Arduino |
|-------------|---------------------|
| Anodo (+)   | Pino Digital 13 (via resistor de 330Ω) |
| Catodo (-)  | GND                |

---

//CÓDIGO SENSOR ULTRASSONICO PRO ARDUINO:

const int trigPin = 5; //Emite o sinal sonoro
const int echoPin = 4; //Capta as ondas sonoras refletidas
int enviarpy;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT); //Definido Como saida pois ele emite o sinal sonoro
  pinMode(echoPin, INPUT); //Definido como entrada pois capta as ondas sonoras refletidas
}

void loop() {
  // put your main code here, to run repeatedly:

  //Enviando pulso ultrassonico:
  digitalWrite(trigPin, LOW);
  delayMicroseconds(1000);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(2); 
  //digitalWrite(trigPin, LOW);

  //Leitura do tempo de retorno do pulso:
  long duracao = pulseIn(echoPin, HIGH);

  //Calcula a distancia em cm:
  float distancia = duracao * 0.34/2;
  
  if (distancia > 80) {
    int enviarpy = 1 ;
    Serial.print(enviarpy);
  }
  else {
    int enviarpy = 0;
    Serial.print(enviarpy);
  }



  //Imprime a distancia no monitor serial:
  Serial.print("Distância: ");
  Serial.print(distancia);

  delay(500); // Pequena pausa antes da próxima leitura

}

# Código em Python para Integração

Este código Python lê os dados enviados pelo Arduino via porta serial e executa uma ação (como bloquear a tela) quando a distância detectada pelo sensor ultrassônico atinge um valor específico.

import subprocess
import serial
from time import sleep

def bloquearPc():
    subprocess.run("rundll32.exe user32.dll,LockWorkStation", shell=True)

def distancia(dist):
    if dist > 80:
        print("Longe")
        sleep(0.5)
        bloquearPc()
        return 1
    else:
        print("Perto")
        return 0

print('Inicio do codigo')
while True: #Loop para a conexão com o Arduino
    try:  #Tenta se conectar, se conseguir, o loop se encerra
        arduino = serial.Serial('COM10', 9600)
        print('2')
        print('Arduino conectado')
        break
    except Exception as e: print(e)
        # pass
print('Depois do while true')
while True: #Loop principal
    msg = str(arduino.readline()) #Lê os dados em formato de string
    msg = msg[21:-8] #Fatia a string
    msg = float(msg)
    #print("Mensagem: {:.2f}".format(msg)) #Imprime a mensagem
    #msg = float(msg)
    distancia(msg)
    if distancia(msg) == 1:
        break
    #print(msg,"cm.")
    arduino.flush() #Limpa a comunicação
# Configuração
1. Instale o Python 3.12 ou superior.
2. Instale a biblioteca `pyserial` executando:
   ```bash
   pip install pyserial
   ```
3. Ajuste a porta serial (`COM3`) conforme necessário.

---

#Passo a Passo para Montagem

# 1. Reunir os Materiais
Certifique-se de que todos os componentes estão disponíveis antes de iniciar.

# 2. Montar o Circuito
- Siga o esquema de ligação acima.
- Verifique as conexões no protoboard para garantir que estão firmes.

# 3. Configurar a IDE Arduino
- Instale a [IDE Arduino](https://www.arduino.cc/en/software).
- Configure a porta COM correspondente ao seu Arduino.
- Selecione a placa correta (UNO) no menu "Ferramentas".

# 4. Carregar o Código
- Abra o código fornecido na IDE Arduino.
- Clique em "Upload" para carregar o código na placa Arduino.

# 5. Testar o Sistema
- Posicione o usuário em diferentes distâncias do sensor.
- Verifique a saída no Monitor Serial da IDE Arduino.

# 6. Executar o Código Python
- Salve o código Python em um arquivo (`bloqueio.py`).
- Execute o script no terminal:
  ```bash
  python bloqueio.py
  ```
- Teste o sistema movendo objetos próximos ao sensor e observe o bloqueio de tela.

---

# Aplicativos Utilizados

# 1. Arduino IDE
- Software para desenvolvimento e upload do código no Arduino.

# 2. Python
- Pode ser utilizado para integração com sistemas externos, caso necessário.

# 3. GitHub
- Repositório para compartilhar e hospedar o projeto.

---

# Site do Projeto Completo
https://denisenasct.github.io/sensor-bloqueio (contendo: código, esquemas e instruções).

---

# Dúvidas e Suporte
Para dúvidas ou suporte, entre em contato através do GitHub ou dos canais disponibilizados pelo projeto.

---

**&copy; 2024 Cesar School. Todos os direitos reservados.**

